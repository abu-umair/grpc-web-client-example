// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "user/user.proto" (package "user", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BaseResponse } from "../common/base_response";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * dipisah agar rapi
 *
 * @generated from protobuf message user.Address
 */
export interface Address {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: bigint;
    /**
     * @generated from protobuf field: string full_address = 2
     */
    fullAddress: string;
    /**
     * @generated from protobuf field: string province = 3
     */
    province: string;
    /**
     * @generated from protobuf field: string city = 4
     */
    city: string;
}
/**
 * @generated from protobuf message user.User
 */
export interface User {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: bigint;
    /**
     * string full_name = 2;
     *
     * @generated from protobuf field: int64 age = 3
     */
    age: bigint; // ingin validasi nilainya tidak boleh negatif
    /**
     * @generated from protobuf field: double balance = 4
     */
    balance: number;
    /**
     * @generated from protobuf field: bool is_active = 5
     */
    isActive: boolean;
    /**
     * @generated from protobuf field: user.Address address = 6
     */
    address?: Address;
    /**
     * @generated from protobuf field: repeated string educations = 7
     */
    educations: string[]; // ['SMA', 'D2', 'D3'], ['S1', 'S2', 'S3']
    /**
     * @generated from protobuf field: string spouse_name = 8
     */
    spouseName: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp birth_date = 9
     */
    birthDate?: Timestamp;
}
/**
 * @generated from protobuf message user.CreateResponse
 */
export interface CreateResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1
     */
    base?: BaseResponse;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 2
     */
    createdAt?: Timestamp;
}
/**
 * @generated from protobuf message user.LoginRequest
 */
export interface LoginRequest {
    /**
     * @generated from protobuf field: string email = 1
     */
    email: string;
    /**
     * @generated from protobuf field: string password = 2
     */
    password: string;
}
/**
 * @generated from protobuf message user.LoginResponse
 */
export interface LoginResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1
     */
    base?: BaseResponse;
    /**
     * @generated from protobuf field: string access_token = 2
     */
    accessToken: string;
    /**
     * @generated from protobuf field: string refresh_token = 3
     */
    refreshToken: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Address$Type extends MessageType<Address> {
    constructor() {
        super("user.Address", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "full_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "province", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Address>): Address {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.fullAddress = "";
        message.province = "";
        message.city = "";
        if (value !== undefined)
            reflectionMergePartial<Address>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Address): Address {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string full_address */ 2:
                    message.fullAddress = reader.string();
                    break;
                case /* string province */ 3:
                    message.province = reader.string();
                    break;
                case /* string city */ 4:
                    message.city = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Address, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string full_address = 2; */
        if (message.fullAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fullAddress);
        /* string province = 3; */
        if (message.province !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.province);
        /* string city = 4; */
        if (message.city !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.city);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.Address
 */
export const Address = new Address$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User$Type extends MessageType<User> {
    constructor() {
        super("user.User", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "age", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/, options: { "buf.validate.field": { int64: { gte: "0" } } } },
            { no: 4, name: "balance", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/, options: { "buf.validate.field": { double: { lte: 1000000, gte: 0 } } } },
            { no: 5, name: "is_active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "address", kind: "message", T: () => Address },
            { no: 7, name: "educations", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "spouse_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "birth_date", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<User>): User {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.age = 0n;
        message.balance = 0;
        message.isActive = false;
        message.educations = [];
        message.spouseName = "";
        if (value !== undefined)
            reflectionMergePartial<User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User): User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 age */ 3:
                    message.age = reader.int64().toBigInt();
                    break;
                case /* double balance */ 4:
                    message.balance = reader.double();
                    break;
                case /* bool is_active */ 5:
                    message.isActive = reader.bool();
                    break;
                case /* user.Address address */ 6:
                    message.address = Address.internalBinaryRead(reader, reader.uint32(), options, message.address);
                    break;
                case /* repeated string educations */ 7:
                    message.educations.push(reader.string());
                    break;
                case /* string spouse_name */ 8:
                    message.spouseName = reader.string();
                    break;
                case /* google.protobuf.Timestamp birth_date */ 9:
                    message.birthDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.birthDate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 age = 3; */
        if (message.age !== 0n)
            writer.tag(3, WireType.Varint).int64(message.age);
        /* double balance = 4; */
        if (message.balance !== 0)
            writer.tag(4, WireType.Bit64).double(message.balance);
        /* bool is_active = 5; */
        if (message.isActive !== false)
            writer.tag(5, WireType.Varint).bool(message.isActive);
        /* user.Address address = 6; */
        if (message.address)
            Address.internalBinaryWrite(message.address, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated string educations = 7; */
        for (let i = 0; i < message.educations.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.educations[i]);
        /* string spouse_name = 8; */
        if (message.spouseName !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.spouseName);
        /* google.protobuf.Timestamp birth_date = 9; */
        if (message.birthDate)
            Timestamp.internalBinaryWrite(message.birthDate, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.User
 */
export const User = new User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateResponse$Type extends MessageType<CreateResponse> {
    constructor() {
        super("user.CreateResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<CreateResponse>): CreateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateResponse): CreateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* google.protobuf.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.CreateResponse
 */
export const CreateResponse = new CreateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginRequest$Type extends MessageType<LoginRequest> {
    constructor() {
        super("user.LoginRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoginRequest>): LoginRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.password = "";
        if (value !== undefined)
            reflectionMergePartial<LoginRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginRequest): LoginRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.LoginRequest
 */
export const LoginRequest = new LoginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginResponse$Type extends MessageType<LoginResponse> {
    constructor() {
        super("user.LoginResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse },
            { no: 2, name: "access_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoginResponse>): LoginResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accessToken = "";
        message.refreshToken = "";
        if (value !== undefined)
            reflectionMergePartial<LoginResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginResponse): LoginResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* string access_token */ 2:
                    message.accessToken = reader.string();
                    break;
                case /* string refresh_token */ 3:
                    message.refreshToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string access_token = 2; */
        if (message.accessToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.accessToken);
        /* string refresh_token = 3; */
        if (message.refreshToken !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.refreshToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.LoginResponse
 */
export const LoginResponse = new LoginResponse$Type();
/**
 * @generated ServiceType for protobuf service user.UserService
 */
export const UserService = new ServiceType("user.UserService", [
    { name: "CreateUser", options: {}, I: User, O: CreateResponse },
    { name: "Login", options: {}, I: LoginRequest, O: LoginResponse }
]);
