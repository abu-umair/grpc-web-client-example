// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "user/user.proto" (package "user", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UserService } from "./user";
import type { LoginResponse } from "./user";
import type { LoginRequest } from "./user";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateResponse } from "./user";
import type { User } from "./user";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service user.UserService
 */
export interface IUserServiceClient {
    /**
     * Unary
     *
     * @generated from protobuf rpc: CreateUser
     */
    createUser(input: User, options?: RpcOptions): UnaryCall<User, CreateResponse>;
    /**
     * @generated from protobuf rpc: Login
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse>;
}
/**
 * @generated from protobuf service user.UserService
 */
export class UserServiceClient implements IUserServiceClient, ServiceInfo {
    typeName = UserService.typeName;
    methods = UserService.methods;
    options = UserService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Unary
     *
     * @generated from protobuf rpc: CreateUser
     */
    createUser(input: User, options?: RpcOptions): UnaryCall<User, CreateResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<User, CreateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Login
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoginRequest, LoginResponse>("unary", this._transport, method, opt, input);
    }
}
